services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sama-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-sama_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - sama-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-sama_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Sama Backend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sama-backend
    # Use env_file to load all variables from the .env file
    env_file:
      - .env
    # The DB_HOST must be the name of the PostgreSQL service inside the Docker network.
    # We override it here so it doesn't try to use 'localhost' from the .env file.
    environment:
      - DB_HOST=postgres
    ports:
      - "8080:8080"
      - "8083:8083"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sama-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # # Logdy Core - Log Aggregation and Visualization
  # logdy:
  #   build:
  #     # may want to pin to a commit
  #     context: https://github.com/logdyhq/logdy-core.git
  #   container_name: sama-logdy
  #   ports:
  #     - "8081:8081"
  #   volumes:
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro`
  #   depends_on:
  #     - app
  #   networks:
  #     - sama-network
  #   command: 
  #     - "follow"
  #     - "/var/lib/docker/containers/*/*-json.log"
  #   # security_opt:
  #   #   - no-new-privileges=true

  pgadmin:
    image: dpage/pgadmin4:latest # Use the latest official pgAdmin 4 image
    container_name: pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: root@gmail.com     # Your desired pgAdmin login email
      PGADMIN_DEFAULT_PASSWORD: root # Your desired pgAdmin login password
      # PGADMIN_LISTEN_PORT: 80 # Default is 80, can change if needed
      # PGADMIN_CONFIG_SERVER_MODE: "False" # Set to True to disable the login screen (not recommended for production)
      # PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False" # Required if PGADMIN_CONFIG_SERVER_MODE is False
      # PGADMIN_CONFIG_SESSION_EXPIRATION_TIME: 1440 # Session expiration time in minutes (default is 1440, 24 hours)
      # PGADMIN_CONFIG_MAX_SESSION_IDLE_TIME: 60 # Maximum session idle time in minutes (default is 60)
    volumes:
      - pgadmin_data:/var/lib/pgadmin # Persist pgAdmin configuration and user data
    ports:
      - "5050:80" # Map host port 5050 to container port 80 (where pgAdmin runs)
    # depends_on: # Uncomment if you're using the 'db' service above
    #   db:
    #     condition: service_healthy

volumes:
  postgres_data:
    driver: local
  pgadmin_data:

networks:
  sama-network:
    driver: bridge
