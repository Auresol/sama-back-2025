basePath: /api/v1
definitions:
  controllers.CheckStudentEmailRequest:
    properties:
      email:
        example: student@example.com
        type: string
      school_id:
        example: 1
        type: integer
    required:
    - email
    - school_id
    type: object
  controllers.ErrorResponse:
    properties:
      message:
        example: Error description
        type: string
    type: object
  controllers.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: Secure_P@ss1
        type: string
    required:
    - email
    - password
    type: object
  controllers.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  controllers.RegisterRequest:
    properties:
      classroom:
        example: A101
        type: string
      email:
        example: user@example.com
        type: string
      firstname:
        example: John
        type: string
      language:
        example: en
        type: string
      lastname:
        example: Doe
        type: string
      number:
        example: 1
        type: integer
      password:
        description: Custom validation for password
        example: Secure_P@ss1
        minLength: 8
        type: string
      phone:
        example: "+1234567890"
        type: string
      role:
        description: Validate against roles
        enum:
        - STD
        - TCH
        - ADMIN
        example: STD
        type: string
      school_id:
        example: 1
        type: integer
    required:
    - email
    - firstname
    - lastname
    - password
    - role
    - school_id
    type: object
  controllers.UpdateClassroomRequest:
    properties:
      new_classroom:
        example: A102
        type: string
      old_classroom:
        example: A101
        type: string
    required:
    - new_classroom
    - old_classroom
    type: object
  controllers.UpdateStudentClassroomRequest:
    properties:
      new_classroom:
        example: C303
        type: string
    required:
    - new_classroom
    type: object
  controllers.UpdateUserPasswordRequest:
    properties:
      new_password:
        description: Custom validation for password
        example: NewSecure_P@ss2
        minLength: 8
        type: string
      old_password:
        example: OldSecure_P@ss1
        type: string
    required:
    - new_password
    - old_password
    type: object
  controllers.UpdateUserProfileRequest:
    properties:
      classroom:
        example: B202
        type: string
      email:
        example: new_email@example.com
        type: string
      firstname:
        example: Jane
        type: string
      is_active:
        description: Pointer for optional boolean update
        example: true
        type: boolean
      language:
        example: th
        type: string
      lastname:
        example: Doe
        type: string
      number:
        description: Pointer for optional int update
        example: 2
        type: integer
      phone:
        example: "+1987654321"
        type: string
      profile_picture_url:
        example: http://example.com/pic.jpg
        type: string
      status:
        example: active
        type: string
    type: object
  models.User:
    properties:
      classroom:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        description: Unique index for email
        type: string
      firstname:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      language:
        type: string
      lastname:
        type: string
      number:
        type: integer
      phone:
        type: string
      profile_picture_url:
        type: string
      role:
        type: string
      school_id:
        type: integer
      status:
        type: string
      updatedAt:
        type: string
      user_id:
        description: Unique index for user_id
        type: string
    required:
    - email
    - firstname
    - lastname
    - number
    - role
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A modern Go backend API for Sama application
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Sama Backend API
  version: "1.0"
paths:
  /check-student-email:
    post:
      consumes:
      - application/json
      description: Checks if a student's email is known to the school (i.e., whitelisted)
        for registration. Requires ADMIN or Sama Crew role.
      parameters:
      - description: Email and School ID to check
        in: body
        name: check_email
        required: true
        schema:
          $ref: '#/definitions/controllers.CheckStudentEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email eligibility status
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions or not authorized for this
            school)
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Check if student email is eligible for registration
      tags:
      - Account
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user credentials and return a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login with JWT token
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Invalid request payload or validation error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Invalid credentials or account deactivated
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Log in a user
      tags:
      - Account
  /me:
    get:
      description: Retrieve the profile details of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized (missing or invalid token)
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get authenticated user's profile
      tags:
      - Account
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user account (can be STD, TCH, ADMIN)
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request payload or validation error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "409":
          description: User with this email already exists
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register a new user
      tags:
      - Account
  /schools/{school_id}/classrooms:
    put:
      consumes:
      - application/json
      description: Update the classroom for all students in a given school from old
        classroom to new classroom. Requires ADMIN or Sama Crew role.
      parameters:
      - description: School ID
        in: path
        name: school_id
        required: true
        type: integer
      - description: Old and new classroom names
        in: body
        name: classroom_update
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateClassroomRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Number of users updated
          schema:
            additionalProperties:
              format: int64
              type: integer
            type: object
        "400":
          description: Invalid request payload or school ID
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions or not authorized for this
            school)
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update classroom for a whole school
      tags:
      - Account
  /schools/{school_id}/users:
    get:
      description: Retrieve a list of users belonging to a specific school. Requires
        ADMIN or Sama Crew role.
      parameters:
      - description: School ID
        in: path
        name: school_id
        required: true
        type: integer
      - default: 10
        description: Limit for pagination
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Invalid school ID or pagination parameters
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions or not authorized for this
            school)
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get users by school ID
      tags:
      - Account
  /users/{id}:
    delete:
      description: Delete a user account by ID. Requires ADMIN or Sama Crew role,
        or user deleting self.
      parameters:
      - description: User ID to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User deleted successfully
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions)
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Account
    get:
      description: Retrieve a user's profile by their ID. Requires ADMIN or Sama Crew
        role.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions)
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Account
    put:
      consumes:
      - application/json
      description: Update an authenticated user's profile.
      parameters:
      - description: User ID to update
        in: path
        name: id
        required: true
        type: integer
      - description: User profile data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateUserProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User profile updated successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request payload or validation error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden (cannot update other users or insufficient permissions)
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Account
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Update an authenticated user's password.
      parameters:
      - description: User ID to update password for
        in: path
        name: id
        required: true
        type: integer
      - description: Old and new password
        in: body
        name: password_update
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateUserPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request payload or validation error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized (invalid old password)
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden (cannot update other users' passwords)
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - Account
  /users/{student_id}/classroom:
    put:
      consumes:
      - application/json
      description: Update the classroom for a specific student. Requires ADMIN or
        TCH role.
      parameters:
      - description: Student User ID
        in: path
        name: student_id
        required: true
        type: integer
      - description: New classroom name
        in: body
        name: classroom_update
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateStudentClassroomRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Student classroom updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request payload or student ID
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions or not authorized for this
            student)
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Student not found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a specific student's classroom
      tags:
      - Account
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
