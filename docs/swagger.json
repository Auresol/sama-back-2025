{
    "swagger": "2.0",
    "info": {
        "description": "A modern Go backend API for Sama application",
        "title": "Sama Backend API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/check-student-email": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Checks if a student's email is known to the school (i.e., whitelisted) for registration. Requires ADMIN or Sama Crew role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Check if student email is eligible for registration",
                "parameters": [
                    {
                        "description": "Email and School ID to check",
                        "name": "check_email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CheckStudentEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email eligibility status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (insufficient permissions or not authorized for this school)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "return if database is healty",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Check health",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user credentials and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login with JWT token",
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or account deactivated",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the profile details of the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get authenticated user's profile",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing or invalid token)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user account (can be STD, TCH, ADMIN)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User with this email already exists",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/schools": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of all school records with pagination. Requires Sama Crew role.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "School"
                ],
                "summary": "Get all schools",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit for pagination",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of schools retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.School"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (insufficient permissions)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new school record. Requires ADMIN or Sama Crew role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "School"
                ],
                "summary": "Create a new school",
                "parameters": [
                    {
                        "description": "School creation details",
                        "name": "school",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateSchoolRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "School created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.School"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (insufficient permissions)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "School with this email or short name already exists",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/schools/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a school's details by its ID. Accessible by ADMIN (for their school), SAMA_CREW, or any TCH/STD if they belong to that school.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "School"
                ],
                "summary": "Get school by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "School ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "School retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.School"
                        }
                    },
                    "400": {
                        "description": "Invalid school ID",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (not authorized to access this school's data)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "School not found",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing school record by ID. Requires ADMIN (for their school) or Sama Crew role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "School"
                ],
                "summary": "Update a school",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "School ID to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "School update details",
                        "name": "school",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateSchoolRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "School updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.School"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (insufficient permissions or not authorized for this school)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "School not found",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "New email or short name already exists for another school",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a school record by ID. Requires ADMIN (for their school) or Sama Crew role.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "School"
                ],
                "summary": "Delete a school",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "School ID to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "School deleted successfully"
                    },
                    "400": {
                        "description": "Invalid school ID",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (insufficient permissions or not authorized for this school)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "School not found",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/schools/{school_id}/classrooms": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the classroom for all students in a given school from old classroom to new classroom. Requires ADMIN or Sama Crew role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Update classroom for a whole school",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "School ID",
                        "name": "school_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Old and new classroom names",
                        "name": "classroom_update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateClassroomRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Number of users updated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or school ID",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (insufficient permissions or not authorized for this school)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/schools/{school_id}/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of users belonging to a specific school. Requires ADMIN or Sama Crew role.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get users by school ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "School ID",
                        "name": "school_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit for pagination",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid school ID or pagination parameters",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (insufficient permissions or not authorized for this school)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a user's profile by their ID. Requires ADMIN or Sama Crew role.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (insufficient permissions)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an authenticated user's profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User profile data to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateUserProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (cannot update other users or insufficient permissions)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user account by ID. Requires ADMIN or Sama Crew role, or user deleting self.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (insufficient permissions)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an authenticated user's password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Update user password",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID to update password for",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Old and new password",
                        "name": "password_update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateUserPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (invalid old password)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (cannot update other users' passwords)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{student_id}/classroom": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the classroom for a specific student. Requires ADMIN or TCH role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Update a specific student's classroom",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Student User ID",
                        "name": "student_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New classroom name",
                        "name": "classroom_update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateStudentClassroomRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Student classroom updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or student ID",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (insufficient permissions or not authorized for this student)",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Student not found",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.CheckStudentEmailRequest": {
            "type": "object",
            "required": [
                "email",
                "school_id"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "student@example.com"
                },
                "school_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "controllers.CreateSchoolRequest": {
            "type": "object",
            "required": [
                "email",
                "english_name",
                "location",
                "phone",
                "school_year",
                "semester",
                "short_name",
                "thai_name"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "info@smk.ac.th"
                },
                "english_name": {
                    "type": "string",
                    "example": "Samakkee Wittaya School"
                },
                "location": {
                    "type": "string",
                    "example": "Bangkok, Thailand"
                },
                "phone": {
                    "type": "string",
                    "example": "+66812345678"
                },
                "school_year": {
                    "type": "integer",
                    "example": 2568
                },
                "semester": {
                    "type": "integer",
                    "example": 1
                },
                "short_name": {
                    "type": "string",
                    "example": "SMK"
                },
                "thai_name": {
                    "type": "string",
                    "example": "โรงเรียนสามัคคีวิทยา"
                }
            }
        },
        "controllers.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Error description"
                }
            }
        },
        "controllers.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "Secure_P@ss1"
                }
            }
        },
        "controllers.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "controllers.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "password",
                "role",
                "school_id"
            ],
            "properties": {
                "classroom": {
                    "type": "string",
                    "example": "A101"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "firstname": {
                    "type": "string",
                    "example": "John"
                },
                "language": {
                    "type": "string",
                    "example": "en"
                },
                "lastname": {
                    "type": "string",
                    "example": "Doe"
                },
                "number": {
                    "type": "integer",
                    "example": 1
                },
                "password": {
                    "description": "Custom validation for password",
                    "type": "string",
                    "minLength": 8,
                    "example": "Secure_P@ss1"
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "role": {
                    "description": "Validate against roles",
                    "type": "string",
                    "enum": [
                        "STD",
                        "TCH",
                        "ADMIN"
                    ],
                    "example": "STD"
                },
                "school_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "controllers.UpdateClassroomRequest": {
            "type": "object",
            "required": [
                "new_classroom",
                "old_classroom"
            ],
            "properties": {
                "new_classroom": {
                    "type": "string",
                    "example": "A102"
                },
                "old_classroom": {
                    "type": "string",
                    "example": "A101"
                }
            }
        },
        "controllers.UpdateSchoolRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "new_info@smk.ac.th"
                },
                "english_name": {
                    "type": "string",
                    "example": "New Samakkee Wittaya School"
                },
                "location": {
                    "type": "string",
                    "example": "Nonthaburi, Thailand"
                },
                "phone": {
                    "type": "string",
                    "example": "+66923456789"
                },
                "school_year": {
                    "type": "integer",
                    "example": 2569
                },
                "semester": {
                    "type": "integer",
                    "example": 2
                },
                "short_name": {
                    "type": "string",
                    "example": "NSMK"
                },
                "thai_name": {
                    "type": "string",
                    "example": "โรงเรียนสามัคคีวิทยาใหม่"
                }
            }
        },
        "controllers.UpdateStudentClassroomRequest": {
            "type": "object",
            "required": [
                "new_classroom"
            ],
            "properties": {
                "new_classroom": {
                    "type": "string",
                    "example": "C303"
                }
            }
        },
        "controllers.UpdateUserPasswordRequest": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "description": "Custom validation for password",
                    "type": "string",
                    "minLength": 8,
                    "example": "NewSecure_P@ss2"
                },
                "old_password": {
                    "type": "string",
                    "example": "OldSecure_P@ss1"
                }
            }
        },
        "controllers.UpdateUserProfileRequest": {
            "type": "object",
            "properties": {
                "classroom": {
                    "type": "string",
                    "example": "B202"
                },
                "email": {
                    "type": "string",
                    "example": "new_email@example.com"
                },
                "firstname": {
                    "type": "string",
                    "example": "Jane"
                },
                "is_active": {
                    "description": "Pointer for optional boolean update",
                    "type": "boolean",
                    "example": true
                },
                "language": {
                    "type": "string",
                    "example": "th"
                },
                "lastname": {
                    "type": "string",
                    "example": "Doe"
                },
                "number": {
                    "description": "Pointer for optional int update",
                    "type": "integer",
                    "example": 2
                },
                "phone": {
                    "type": "string",
                    "example": "+1987654321"
                },
                "profile_picture_url": {
                    "type": "string",
                    "example": "http://example.com/pic.jpg"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                }
            }
        },
        "models.School": {
            "type": "object",
            "required": [
                "email",
                "english_name",
                "location",
                "phone",
                "school_year",
                "semester",
                "short_name",
                "thai_name"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "email": {
                    "description": "Added unique index for email",
                    "type": "string"
                },
                "english_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "phone": {
                    "description": "e164 for phone number validation",
                    "type": "string"
                },
                "school_year": {
                    "description": "School year must be positive",
                    "type": "integer"
                },
                "semester": {
                    "description": "Semester must be positive",
                    "type": "integer"
                },
                "short_name": {
                    "description": "Added unique index for short_name",
                    "type": "string"
                },
                "thai_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "number",
                "role"
            ],
            "properties": {
                "classroom": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "email": {
                    "description": "Unique index for email",
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "number": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "profile_picture_url": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "school": {
                    "$ref": "#/definitions/models.School"
                },
                "school_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "description": "Unique index for user_id",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}